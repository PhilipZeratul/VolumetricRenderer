#pragma enable_d3d11_debug_symbols

#pragma kernel ClearAllVolumes
#pragma kernel WriteMaterialVolumeConstant
#pragma kernel WriteScatterVolumeDir
#pragma kernel Accumulation

#include "VolumetricHelper.hlsl"

// Kernels
[numthreads(8, 8, 8)]
void ClearAllVolumes(uint3 pos : SV_DispatchThreadID)
{
    _MaterialVolume_A[pos] = 0;
    _MaterialVolume_B[pos] = 0;
    _ScatterVolume[pos] = 0;
    _AccumulationTex[pos.xy] = 0;
}

[numthreads(8 ,8, 8)]
void WriteMaterialVolumeConstant(uint3 pos : SV_DispatchThreadID)
{
    _MaterialVolume_A[pos] = float4(_ScatteringCoef, _AbsorptionCoef);
    _MaterialVolume_B[pos] = float4(_PhaseG, 0, 0, 0);
}

[numthreads(8, 8, 8)]
void WriteScatterVolumeDir(uint3 pos : SV_DispatchThreadID)
{
    // TODO: Sample shadow.
    float shadow = 1;

    float4 materialA = _MaterialVolume_A[pos];
    float4 materialB = _MaterialVolume_B[pos];

    float3 scatterCoef = materialA.rgb;
    float absorptCoef = materialA.a;
    float phaseG = materialB.r;

    float cosTheta = dot(_ViewDir, -_LightDir);

    float3 inScatter = shadow * PhaseFunction(phaseG, cosTheta) * _LightColor * scatterCoef;
    float extinction = Rgb2Gray(scatterCoef) + absorptCoef;

    _ScatterVolume[pos] = float4(inScatter, extinction);
}

[numthreads(8, 8, 1)]
void Accumulation(uint2 pos : SV_DispatchThreadID)
{
    float3 accumuLight = 0;
    float transmittance = 0;

    for (int i = 0; i < _VolumeDepth - 1; i++)
    {
        uint3 curPos = uint3(pos.xy, i);
        uint3 nextPos = uint3(pos.xy, i + 1);

        float4 materialA = _MaterialVolume_A[curPos];
        float4 scatterVolume = _ScatterVolume[curPos];
        float3 scatterCoef = materialA.rgb;
        float3 inScatter = scatterVolume.rgb;
        float extinction = scatterVolume.a;
        
        float3 curWorldPos = FroxelPos2WorldPos(uint3(curPos)).xyz;
        //float3 nextWorldPos = FroxelPos2WorldPos(uint3(nextPos)).xyz;
        //float stepSize = distance(nextWorldPos, curWorldPos);

        //transmittance *= exp(-extinction * stepSize);
        //accumuLight += inScatter * scatterCoef * transmittance;
    }

    _AccumulationTex[pos] = float4(accumuLight, transmittance);



    _AccumulationTex[pos] = FroxelPos2WorldPos(uint3(pos.xy, _VolumeDepth));
    //_AccumulationTex[pos] = float4(pos, 0, 0);
}
